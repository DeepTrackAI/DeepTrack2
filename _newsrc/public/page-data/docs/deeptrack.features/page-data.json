{
    "componentChunkName": "component---src-templates-module-page-tsx",
    "path": "/docs/deeptrack.features",
    "result": {"pageContext":{"classes":{"Add":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Adds a value to the input."}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"value"}]},{"type":"classifier","children":[{"type":"Text","content":"number"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"The value to add"}]}]}]}]}]}]},"superclass":"ArithmeticOperationFeature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"Add","qualified_name":"deeptrack.features.Add","signature":"(value: Union[float, Callable[..., float]] = 0, **kwargs)"},"Arguments":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"A convenience container for pipeline arguments."}]},{"type":"paragraph","children":[{"type":"Text","content":"A typical use-case is:"}]},{"type":"literal_block","children":[{"type":"Text","content":"arguments = Arguments(is_label=False)\nimage_loader = (\n    LoadImage(path=\"./image.png\") >>\n    GaussianNoise(sigma = (1 - arguments.is_label) * 5)\n)\nimage_loader.bind_arguments(arguments)\n\nimage_loader()              # Image with added noise\nimage_loader(is_label=True) # Raw image with no noise"}]},{"type":"paragraph","children":[{"type":"Text","content":"For non-mathematical dependence, create a local link to the property as follows:"}]},{"type":"literal_block","children":[{"type":"Text","content":"arguments = Arguments(is_label=False)\nimage_loader = (\n    LoadImage(path=\"./image.png\") >>\n    GaussianNoise(\n       is_label=arguments.is_label,\n       sigma=lambda is_label: 0 if is_label else 5\n    )\n)\nimage_loader.bind_arguments(arguments)\n\nimage_loader()              # Image with added noise\nimage_loader(is_label=True) # Raw image with no noise"}]},{"type":"paragraph","children":[{"type":"Text","content":"Keep in mind that if any dependent property is non-deterministic,\nthey may permanently change:"}]},{"type":"literal_block","children":[{"type":"Text","content":"arguments = Arguments(noise_max_sigma=5)\nimage_loader = (\n    LoadImage(path=\"./image.png\") >>\n    GaussianNoise(\n       noise_max_sigma=5,\n       sigma=lambda noise_max_sigma: rand() * noise_max_sigma\n    )\n)\n\nimage_loader.bind_arguments(arguments)\n\nimage_loader().get_property(\"sigma\") # 3.27...\nimage_loader(noise_max_sigma=0) # 0\nimage_loader().get_property(\"sigma\") # 1.93..."}]},{"type":"paragraph","children":[{"type":"Text","content":"As with any feature, all arguments can be passed by deconstructing the properties dict:"}]},{"type":"literal_block","children":[{"type":"Text","content":"arguments = Arguments(is_label=False, noise_sigma=5)\nimage_loader = (\n    LoadImage(path=\"./image.png\") >>\n    GaussianNoise(\n       sigma=lambda is_label, noise_sigma: 0 if is_label else noise_sigma\n       **arguments.properties\n    )\n)\nimage_loader.bind_arguments(arguments)\n\nimage_loader()              # Image with added noise\nimage_loader(is_label=True) # Raw image with no noise"}]}]},"superclass":"Feature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"Arguments","qualified_name":"deeptrack.features.Arguments","signature":"(_input=[], **kwargs)"},"ArithmeticOperationFeature":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Parent feature of arithmetic operation features like +*-/> etc."}]}]},"superclass":"Feature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"ArithmeticOperationFeature","qualified_name":"deeptrack.features.ArithmeticOperationFeature","signature":"(op, value=0, **kwargs)"},"AsType":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Converts the data type of images"}]},{"type":"paragraph","children":[{"type":"Text","content":"Accepts same types as numpy arrays. Common types include"}]},{"type":"paragraph","children":[{"type":"title_reference","children":[{"type":"Text","content":"float64, int32, uint16, int16, uint8, int8"}]}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"dtype"}]},{"type":"classifier","children":[{"type":"Text","content":"str"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"dtype string. Same as numpy dtype."}]}]}]}]}]}]},"superclass":"Feature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"AsType","qualified_name":"deeptrack.features.AsType","signature":"(dtype: Union[Any, Callable[..., Any]] = 'float64', **kwargs)"},"Bind":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Binds a feature with property arguments."}]},{"type":"paragraph","children":[{"type":"Text","content":"When the feature is resolved, the kwarg arguments are passed\nto the child feature."}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"feature"}]},{"type":"classifier","children":[{"type":"Text","content":"Feature"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"The child feature"}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"problematic","children":[{"type":"Text","content":"**"}]},{"type":"Text","content":"kwargs"}]},{"type":"definition","children":[{"type":"system_message","children":[{"type":"paragraph","children":[{"type":"Text","content":"Inline strong start-string without end-string."}]}]},{"type":"paragraph","children":[{"type":"Text","content":"Properties to send to child"}]}]}]}]}]}]},"superclass":"StructuralFeature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"Bind","qualified_name":"deeptrack.features.Bind","signature":"(feature: deeptrack.features.Feature, **kwargs)"},"BindUpdate":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Binds a feature with certain arguments."}]},{"type":"paragraph","children":[{"type":"Text","content":"When the feature is updated, the child feature"}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"feature"}]},{"type":"classifier","children":[{"type":"Text","content":"Feature"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"The child feature"}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"problematic","children":[{"type":"Text","content":"**"}]},{"type":"Text","content":"kwargs"}]},{"type":"definition","children":[{"type":"system_message","children":[{"type":"paragraph","children":[{"type":"Text","content":"Inline strong start-string without end-string."}]}]},{"type":"paragraph","children":[{"type":"Text","content":"Properties to send to child"}]}]}]}]}]}]},"superclass":"StructuralFeature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"BindUpdate","qualified_name":"deeptrack.features.BindUpdate","signature":"(feature: deeptrack.features.Feature, **kwargs)"},"Chain":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Resolves two features sequentially.\nPasses the output of the first to the input of the second.\nParameters\n----------\nfeature_1 : Feature\nfeature_2 : Feature"}]}]},"superclass":"StructuralFeature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"Chain","qualified_name":"deeptrack.features.Chain","signature":"(feature_1: deeptrack.features.Feature, feature_2: deeptrack.features.Feature, **kwargs)"},"Combine":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Combines multiple features into a single feature."}]},{"type":"paragraph","children":[{"type":"Text","content":"Resolves each feature in "},{"type":"title_reference","children":[{"type":"Text","content":"features"}]},{"type":"Text","content":" and returns them as a list of features."}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"features"}]},{"type":"classifier","children":[{"type":"Text","content":"list of features"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"features to combine"}]}]}]}]}]}]},"superclass":"StructuralFeature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"Combine","qualified_name":"deeptrack.features.Combine","signature":"(features: List[deeptrack.features.Feature], **kwargs)"},"ConditionalSetFeature":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Conditionally resolves one of two features"}]},{"type":"paragraph","children":[{"type":"Text","content":"Set condition to the value to listen to. Example,\nif condition is \"is_label\", then conditiona can be toggled\nby calling either"}]},{"type":"paragraph","children":[{"type":"Text","content":"Feature.resolve(is_label=True) / Feature.resolve(is_label=False)\nFeature.update(is_label=True) / Feature.update(is_label=False)"}]},{"type":"paragraph","children":[{"type":"Text","content":"Note that both features will be updated in either case."}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"on_false"}]},{"type":"classifier","children":[{"type":"Text","content":"Feature"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Feature to resolve if the conditional property is false"}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"on_true"}]},{"type":"classifier","children":[{"type":"Text","content":"Feature"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Feature to resolve if the conditional property is true"}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"condition"}]},{"type":"classifier","children":[{"type":"Text","content":"str"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"The name of the conditional property"}]}]}]}]}]}]},"superclass":"StructuralFeature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"ConditionalSetFeature","qualified_name":"deeptrack.features.ConditionalSetFeature","signature":"(on_false: deeptrack.features.Feature = None, on_true: deeptrack.features.Feature = None, condition: Union[str, Callable[..., str]] = 'is_label', **kwargs)"},"ConditionalSetProperty":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Conditionally overrides the properties of child features."}]},{"type":"paragraph","children":[{"type":"Text","content":"It is adviceable to use dt.Arguments instead. Note that this overwrites the properties, and as\nsuch may affect future calls."}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"feature"}]},{"type":"classifier","children":[{"type":"Text","content":"Feature"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"The child feature"}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"condition"}]},{"type":"classifier","children":[{"type":"Text","content":"bool-like or str"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"A boolean or the name a boolean property"}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"problematic","children":[{"type":"Text","content":"**"}]},{"type":"Text","content":"kwargs"}]},{"type":"definition","children":[{"type":"system_message","children":[{"type":"paragraph","children":[{"type":"Text","content":"Inline strong start-string without end-string."}]}]},{"type":"paragraph","children":[{"type":"Text","content":"Properties to be used if "},{"type":"title_reference","children":[{"type":"Text","content":"condition"}]},{"type":"Text","content":" is True"}]}]}]}]}]}]},"superclass":"StructuralFeature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"ConditionalSetProperty","qualified_name":"deeptrack.features.ConditionalSetProperty","signature":"(feature: deeptrack.features.Feature, condition=typing.Union[str, typing.Callable[..., str]], **kwargs)"},"Dataset":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Grabs data from a local set of data."}]},{"type":"paragraph","children":[{"type":"Text","content":"The first argument should be an iterator, function or constant,\nwhich provides access to a single sample from a dataset. If it returns\na tuple, the first element should be an array-like and the second a\ndictionary. The array-like will be returned as an image with the dictionary\nadded to the set of properties."}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"data"}]},{"type":"classifier","children":[{"type":"Text","content":"tuple or array_like"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Any property that returns a single image or a tuple of two objects,\nwhere the first is an array_like."}]}]}]}]}]}]},"superclass":"Feature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"Dataset","qualified_name":"deeptrack.features.Dataset","signature":"(data: Iterator, **kwargs)"},"Divide":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Divides the input with a value."}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"value"}]},{"type":"classifier","children":[{"type":"Text","content":"number"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"The value to divide with."}]}]}]}]}]}]},"superclass":"ArithmeticOperationFeature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"Divide","qualified_name":"deeptrack.features.Divide","signature":"(value: Union[float, Callable[..., float]] = 0, **kwargs)"},"DummyFeature":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Feature that does nothing"}]},{"type":"paragraph","children":[{"type":"Text","content":"Can be used as a container for properties to separate the code logically."}]}]},"superclass":"Feature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"DummyFeature","qualified_name":"deeptrack.features.DummyFeature","signature":"(_input=[], **kwargs)"},"Equals":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Divides the input with a value."}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"value"}]},{"type":"classifier","children":[{"type":"Text","content":"number"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"The value to divide with."}]}]}]}]}]}]},"superclass":"ArithmeticOperationFeature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"Equals","qualified_name":"deeptrack.features.Equals","signature":"(value: Union[float, Callable[..., float]] = 0, **kwargs)"},"Feature":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Base feature class.\nFeatures define the image generation process. All features operate\non lists of images. Most features, such as noise, apply some\ntranformation to all images in the list. This transformation can\nbe additive, such as adding some Gaussian noise or a background\nillumination, or non-additive, such as introducing Poisson noise\nor performing a low-pass filter. This transformation is defined\nby the method "},{"type":"title_reference","children":[{"type":"Text","content":"get(image, **kwargs)"}]},{"type":"Text","content":", which all implementations of\nthe class "},{"type":"title_reference","children":[{"type":"Text","content":"Feature"}]},{"type":"Text","content":" need to define."}]},{"type":"paragraph","children":[{"type":"Text","content":"Whenever a Feature is initiated, all keyword arguments passed to the\nconstructor will be wrapped as a Property, and stored in the\n"},{"type":"title_reference","children":[{"type":"Text","content":"properties"}]},{"type":"Text","content":" field as a "},{"type":"title_reference","children":[{"type":"Text","content":"PropertyDict"}]},{"type":"Text","content":". When a Feature is resolved,\nthe current value of each property is sent as input to the get method."}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"problematic","children":[{"type":"Text","content":"*"}]},{"type":"Text","content":"args"}]},{"type":"classifier","children":[{"type":"Text","content":"dict, optional"}]},{"type":"definition","children":[{"type":"system_message","children":[{"type":"paragraph","children":[{"type":"Text","content":"Inline emphasis start-string without end-string."}]}]},{"type":"paragraph","children":[{"type":"Text","content":"Dicts passed as nonkeyword arguments will be deconstructed to key-value\npairs and included in the field "},{"type":"title_reference","children":[{"type":"Text","content":"properties"}]},{"type":"Text","content":" in the same way as keyword\narguments."}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"problematic","children":[{"type":"Text","content":"**"}]},{"type":"Text","content":"kwargs"}]},{"type":"definition","children":[{"type":"system_message","children":[{"type":"paragraph","children":[{"type":"Text","content":"Inline strong start-string without end-string."}]}]},{"type":"paragraph","children":[{"type":"Text","content":"All Keyword arguments will be wrapped as instances of "},{"type":"literal","children":[{"type":"Text","content":"Property"}]},{"type":"Text","content":" and\nincluded in the field "},{"type":"title_reference","children":[{"type":"Text","content":"properties"}]},{"type":"Text","content":"."}]}]}]}]}]}],"Attributes":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Attributes"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"properties"}]},{"type":"classifier","children":[{"type":"Text","content":"dict"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"A dict that contains all keyword arguments passed to the\nconstructor wrapped as Distributions. A sampled copy of this\ndict is sent as input to the get function, and is appended\nto the properties field of the output image."}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"__list_merge_strategy__"}]},{"type":"classifier","children":[{"type":"Text","content":"int"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Controls how the output of "},{"type":"title_reference","children":[{"type":"Text","content":".get(image, **kwargs)"}]},{"type":"Text","content":" is merged with\nthe input list. It can be "},{"type":"title_reference","children":[{"type":"Text","content":"MERGE_STRATEGY_OVERRIDE"}]},{"type":"Text","content":" (0, default),\nwhere the input is replaced by the new list, or\n"},{"type":"title_reference","children":[{"type":"Text","content":"MERGE_STRATEGY_APPEND"}]},{"type":"Text","content":" (1), where the new list is appended to the\nend of the input list."}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"__distributed__"}]},{"type":"classifier","children":[{"type":"Text","content":"bool"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Controls whether "},{"type":"title_reference","children":[{"type":"Text","content":".get(image, **kwargs)"}]},{"type":"Text","content":" is called on each element\nin the list separately ("},{"type":"title_reference","children":[{"type":"Text","content":"__distributed__ = True"}]},{"type":"Text","content":"), or if it is\ncalled on the list as a whole ("},{"type":"title_reference","children":[{"type":"Text","content":"__distributed__ = False"}]},{"type":"Text","content":")."}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"__property_memorability__"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Controls whether to store the features properties to the "},{"type":"title_reference","children":[{"type":"Text","content":"Image"}]},{"type":"Text","content":".\nValues 1 or lower will be included by default."}]}]}]}]}]}]},"superclass":"DeepTrackNode","superclass_module":"deeptrack.backend.core","module":"deeptrack.features","name":"Feature","qualified_name":"deeptrack.features.Feature","signature":"(_input=[], **kwargs)"},"FloorDivide":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Divides the input with a value."}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"value"}]},{"type":"classifier","children":[{"type":"Text","content":"number"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"The value to divide with."}]}]}]}]}]}]},"superclass":"ArithmeticOperationFeature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"FloorDivide","qualified_name":"deeptrack.features.FloorDivide","signature":"(value: Union[float, Callable[..., float]] = 0, **kwargs)"},"GreaterThan":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Divides the input with a value."}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"value"}]},{"type":"classifier","children":[{"type":"Text","content":"number"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"The value to divide with."}]}]}]}]}]}]},"superclass":"ArithmeticOperationFeature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"GreaterThan","qualified_name":"deeptrack.features.GreaterThan","signature":"(value: Union[float, Callable[..., float]] = 0, **kwargs)"},"GreaterThanOrEquals":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Divides the input with a value."}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"value"}]},{"type":"classifier","children":[{"type":"Text","content":"number"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"The value to divide with."}]}]}]}]}]}]},"superclass":"ArithmeticOperationFeature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"GreaterThanOrEquals","qualified_name":"deeptrack.features.GreaterThanOrEquals","signature":"(value: Union[float, Callable[..., float]] = 0, **kwargs)"},"Label":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Outputs the properties of this features."}]},{"type":"paragraph","children":[{"type":"Text","content":"Can be used to extract properties in a feature set and combine them into\na numpy array."}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"output_shape"}]},{"type":"classifier","children":[{"type":"Text","content":"tuple of ints"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Reshapes the output to this shape"}]}]}]}]}]}]},"superclass":"Feature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"Label","qualified_name":"deeptrack.features.Label","signature":"(output_shape: Union[int, Callable[..., int]] = None, **kwargs)"},"Lambda":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Calls a custom function on each image in the input."}]},{"type":"paragraph","children":[{"type":"Text","content":"Note that the property "},{"type":"title_reference","children":[{"type":"Text","content":"function"}]},{"type":"Text","content":" needs to be wrapped in an\nouter layer function. The outer layer function can depend on\nother properties, while the inner layer function accepts an\nimage as input."}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"function"}]},{"type":"classifier","children":[{"type":"Text","content":"Callable[Image]"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Function that takes the current image as first input"}]}]}]}]}]}]},"superclass":"Feature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"Lambda","qualified_name":"deeptrack.features.Lambda","signature":"(function: Callable[..., Callable[[deeptrack.image.Image], deeptrack.image.Image]], **kwargs)"},"LessThan":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Divides the input with a value."}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"value"}]},{"type":"classifier","children":[{"type":"Text","content":"number"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"The value to divide with."}]}]}]}]}]}]},"superclass":"ArithmeticOperationFeature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"LessThan","qualified_name":"deeptrack.features.LessThan","signature":"(value: Union[float, Callable[..., float]] = 0, **kwargs)"},"LessThanOrEquals":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Divides the input with a value."}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"value"}]},{"type":"classifier","children":[{"type":"Text","content":"number"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"The value to divide with."}]}]}]}]}]}]},"superclass":"ArithmeticOperationFeature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"LessThanOrEquals","qualified_name":"deeptrack.features.LessThanOrEquals","signature":"(value: Union[float, Callable[..., float]] = 0, **kwargs)"},"LoadImage":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Loads an image from disk."}]},{"type":"paragraph","children":[{"type":"Text","content":"Cycles through file-readers numpy, pillow and opencv2 to open the\nimage file."}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"path"}]},{"type":"classifier","children":[{"type":"Text","content":"str"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Path to image to load"}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"load_options"}]},{"type":"classifier","children":[{"type":"Text","content":"dict"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Options passed to the file reader"}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"as_list"}]},{"type":"classifier","children":[{"type":"Text","content":"bool"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"If True, the irst dimension will be converted to a list."}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"ndim"}]},{"type":"classifier","children":[{"type":"Text","content":"int"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Adds dimensions until it is at least ndim"}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"to_grayscale"}]},{"type":"classifier","children":[{"type":"Text","content":"bool"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Whether to convert the image to grayscale"}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"get_one_random"}]},{"type":"classifier","children":[{"type":"Text","content":"bool"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Extracts a single image from a stack. Only used if as_list is true."}]}]}]}]}]}],"Raises":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Raises"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"IOError"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"If no file reader could parse the file or the file doesn't exist."}]}]}]}]}]}]},"superclass":"Feature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"LoadImage","qualified_name":"deeptrack.features.LoadImage","signature":"(path: Union[str, Callable[..., str]], load_options: Union[dict, Callable[..., dict]] = None, as_list: Union[bool, Callable[..., bool]] = False, ndim: Union[int, Callable[..., int]] = 3, to_grayscale: Union[bool, Callable[..., bool]] = False, get_one_random: Union[bool, Callable[..., bool]] = False, **kwargs)"},"Merge":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Calls a custom function on the entire input."}]},{"type":"paragraph","children":[{"type":"Text","content":"Note that the property "},{"type":"title_reference","children":[{"type":"Text","content":"function"}]},{"type":"Text","content":" needs to be wrapped in an\nouter layer function. The outer layer function can depend on\nother properties, while the inner layer function accepts an\nimage as input."}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"function"}]},{"type":"classifier","children":[{"type":"Text","content":"Callable[list of Image]"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Function that takes the current image as first input"}]}]}]}]}]}]},"superclass":"Feature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"Merge","qualified_name":"deeptrack.features.Merge","signature":"(function: Callable[..., Callable[[List[deeptrack.image.Image]], deeptrack.image.Image]], **kwargs)"},"Multiply":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Multiplies the input with a value."}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"value"}]},{"type":"classifier","children":[{"type":"Text","content":"number"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"The value to multiply with."}]}]}]}]}]}]},"superclass":"ArithmeticOperationFeature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"Multiply","qualified_name":"deeptrack.features.Multiply","signature":"(value: Union[float, Callable[..., float]] = 0, **kwargs)"},"OneOf":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Resolves one feature from a collection on the input."}]},{"type":"paragraph","children":[{"type":"Text","content":"Valid collections are any object that can be iterated (such as lists, tuples and sets).\nInternally, the collection is converted to a tuple."}]},{"type":"paragraph","children":[{"type":"Text","content":"Default behaviour is to sample the collection uniformly random. This can be\ncontrolled by the "},{"type":"title_reference","children":[{"type":"Text","content":"key"}]},{"type":"Text","content":" argument, where the feature resolved is chosen as\n"},{"type":"title_reference","children":[{"type":"Text","content":"tuple(collection)[key]"}]},{"type":"Text","content":"."}]}]},"superclass":"Feature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"OneOf","qualified_name":"deeptrack.features.OneOf","signature":"(collection, key=None, **kwargs)"},"OneOfDict":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Resolves one feature from a dictionary."}]},{"type":"paragraph","children":[{"type":"Text","content":"Default behaviour is to sample the values diction uniformly random. This can be\ncontrolled by the "},{"type":"title_reference","children":[{"type":"Text","content":"key"}]},{"type":"Text","content":" argument, where the feature resolved is chosen as\n"},{"type":"title_reference","children":[{"type":"Text","content":"collection[key]"}]},{"type":"Text","content":"."}]}]},"superclass":"Feature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"OneOfDict","qualified_name":"deeptrack.features.OneOfDict","signature":"(collection, key=None, **kwargs)"},"Power":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Raises the input to a power."}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"value"}]},{"type":"classifier","children":[{"type":"Text","content":"number"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"The power to raise with."}]}]}]}]}]}]},"superclass":"ArithmeticOperationFeature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"Power","qualified_name":"deeptrack.features.Power","signature":"(value: Union[float, Callable[..., float]] = 0, **kwargs)"},"Probability":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Resolves a feature with a certain probability"}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"feature"}]},{"type":"classifier","children":[{"type":"Text","content":"Feature"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Feature to resolve"}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"probability"}]},{"type":"classifier","children":[{"type":"Text","content":"float"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Probability to resolve"}]}]}]}]}]}]},"superclass":"StructuralFeature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"Probability","qualified_name":"deeptrack.features.Probability","signature":"(feature: deeptrack.features.Feature, probability: Union[float, Callable[..., float]], *args, **kwargs)"},"Repeat":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Base feature class.\nFeatures define the image generation process. All features operate\non lists of images. Most features, such as noise, apply some\ntranformation to all images in the list. This transformation can\nbe additive, such as adding some Gaussian noise or a background\nillumination, or non-additive, such as introducing Poisson noise\nor performing a low-pass filter. This transformation is defined\nby the method "},{"type":"title_reference","children":[{"type":"Text","content":"get(image, **kwargs)"}]},{"type":"Text","content":", which all implementations of\nthe class "},{"type":"title_reference","children":[{"type":"Text","content":"Feature"}]},{"type":"Text","content":" need to define."}]},{"type":"paragraph","children":[{"type":"Text","content":"Whenever a Feature is initiated, all keyword arguments passed to the\nconstructor will be wrapped as a Property, and stored in the\n"},{"type":"title_reference","children":[{"type":"Text","content":"properties"}]},{"type":"Text","content":" field as a "},{"type":"title_reference","children":[{"type":"Text","content":"PropertyDict"}]},{"type":"Text","content":". When a Feature is resolved,\nthe current value of each property is sent as input to the get method."}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"problematic","children":[{"type":"Text","content":"*"}]},{"type":"Text","content":"args"}]},{"type":"classifier","children":[{"type":"Text","content":"dict, optional"}]},{"type":"definition","children":[{"type":"system_message","children":[{"type":"paragraph","children":[{"type":"Text","content":"Inline emphasis start-string without end-string."}]}]},{"type":"paragraph","children":[{"type":"Text","content":"Dicts passed as nonkeyword arguments will be deconstructed to key-value\npairs and included in the field "},{"type":"title_reference","children":[{"type":"Text","content":"properties"}]},{"type":"Text","content":" in the same way as keyword\narguments."}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"problematic","children":[{"type":"Text","content":"**"}]},{"type":"Text","content":"kwargs"}]},{"type":"definition","children":[{"type":"system_message","children":[{"type":"paragraph","children":[{"type":"Text","content":"Inline strong start-string without end-string."}]}]},{"type":"paragraph","children":[{"type":"Text","content":"All Keyword arguments will be wrapped as instances of "},{"type":"literal","children":[{"type":"Text","content":"Property"}]},{"type":"Text","content":" and\nincluded in the field "},{"type":"title_reference","children":[{"type":"Text","content":"properties"}]},{"type":"Text","content":"."}]}]}]}]}]}],"Attributes":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Attributes"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"properties"}]},{"type":"classifier","children":[{"type":"Text","content":"dict"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"A dict that contains all keyword arguments passed to the\nconstructor wrapped as Distributions. A sampled copy of this\ndict is sent as input to the get function, and is appended\nto the properties field of the output image."}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"__list_merge_strategy__"}]},{"type":"classifier","children":[{"type":"Text","content":"int"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Controls how the output of "},{"type":"title_reference","children":[{"type":"Text","content":".get(image, **kwargs)"}]},{"type":"Text","content":" is merged with\nthe input list. It can be "},{"type":"title_reference","children":[{"type":"Text","content":"MERGE_STRATEGY_OVERRIDE"}]},{"type":"Text","content":" (0, default),\nwhere the input is replaced by the new list, or\n"},{"type":"title_reference","children":[{"type":"Text","content":"MERGE_STRATEGY_APPEND"}]},{"type":"Text","content":" (1), where the new list is appended to the\nend of the input list."}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"__distributed__"}]},{"type":"classifier","children":[{"type":"Text","content":"bool"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Controls whether "},{"type":"title_reference","children":[{"type":"Text","content":".get(image, **kwargs)"}]},{"type":"Text","content":" is called on each element\nin the list separately ("},{"type":"title_reference","children":[{"type":"Text","content":"__distributed__ = True"}]},{"type":"Text","content":"), or if it is\ncalled on the list as a whole ("},{"type":"title_reference","children":[{"type":"Text","content":"__distributed__ = False"}]},{"type":"Text","content":")."}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"__property_memorability__"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Controls whether to store the features properties to the "},{"type":"title_reference","children":[{"type":"Text","content":"Image"}]},{"type":"Text","content":".\nValues 1 or lower will be included by default."}]}]}]}]}]}]},"superclass":"Feature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"Repeat","qualified_name":"deeptrack.features.Repeat","signature":"(feature, N, **kwargs)"},"SampleToMasks":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Creates a mask from a list of images."}]},{"type":"paragraph","children":[{"type":"Text","content":"Calls "},{"type":"title_reference","children":[{"type":"Text","content":"transformation_function"}]},{"type":"Text","content":" for each input image, and merges the outputs\nto a single image with "},{"type":"title_reference","children":[{"type":"Text","content":"number_of_masks"}]},{"type":"Text","content":" layers. Each input image needs to have\na defined property "},{"type":"title_reference","children":[{"type":"Text","content":"position"}]},{"type":"Text","content":" to place it within the image. If used with scatterers,\nnote that the scatterers need to be passed the property "},{"type":"title_reference","children":[{"type":"Text","content":"voxel_size"}]},{"type":"Text","content":" to correctly\nsize the objects."}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"transformation_function"}]},{"type":"classifier","children":[{"type":"Text","content":"function"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Function that takes an image as input, and outputs another image with "},{"type":"title_reference","children":[{"type":"Text","content":"number_of_masks"}]},{"type":"Text","content":"\nlayers."}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"number_of_masks"}]},{"type":"classifier","children":[{"type":"Text","content":"int"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"The number of masks to create."}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"output_region"}]},{"type":"classifier","children":[{"type":"Text","content":"(int, int, int, int)"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Size and relative position of the mask. Should generally be the same as\n"},{"type":"title_reference","children":[{"type":"Text","content":"optics.output_region"}]},{"type":"Text","content":"."}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"merge_method"}]},{"type":"classifier","children":[{"type":"Text","content":"str or function or list"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"How to merge the individual masks to a single image. If a list, the merge_metod\nis per mask. Can be"}]},{"type":"system_message","children":[{"type":"paragraph","children":[{"type":"Text","content":"Unexpected indentation."}]}]},{"type":"block_quote","children":[{"type":"bullet_list","children":[{"type":"list_item","children":[{"type":"paragraph","children":[{"type":"Text","content":"\"add\": Adds the masks together."}]}]},{"type":"list_item","children":[{"type":"paragraph","children":[{"type":"Text","content":"\"overwrite\": later masks overwrite earlier masks."}]}]},{"type":"list_item","children":[{"type":"paragraph","children":[{"type":"Text","content":"\"or\": 1 if either any mask is non-zero at that pixel"}]}]},{"type":"list_item","children":[{"type":"paragraph","children":[{"type":"Text","content":"function: a function that accepts two images. The first is the current\nvalue of the output image where a new mask will be places, and\nthe second is the mask to merge with the output image."}]}]}]}]}]}]}]}]}]},"superclass":"Feature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"SampleToMasks","qualified_name":"deeptrack.features.SampleToMasks","signature":"(transformation_function: Callable[..., Callable[[deeptrack.image.Image], deeptrack.image.Image]], number_of_masks: Union[int, Callable[..., int]] = 1, output_region: Union[Tuple[int], List[int], numpy.ndarray, Callable[..., Union[Tuple[int], List[int], numpy.ndarray]]] = None, merge_method: Union[str, Callable[..., str]] = 'add', **kwargs)"},"Slice":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Array indexing for each Image in list."}]},{"type":"paragraph","children":[{"type":"Text","content":"Note, this feature is rarely needed to be used directly. Instead,\nyou can do normal array indexing on a feature directly. For example:"}]},{"type":"literal_block","children":[{"type":"Text","content":"feature = dt.DummyFeature()\nsliced_feature = feature[\n    lambda: 0 : lambda: 1,\n    1:2,\n    lambda: slice(None, None, -2)\n]\nsliced_feature.resolve(np.arange(27).reshape((3, 3, 3)))"}]},{"type":"paragraph","children":[{"type":"Text","content":"In the example above, "},{"type":"title_reference","children":[{"type":"Text","content":"lambda"}]},{"type":"Text","content":" is used to demonstrate different ways\nto interact with the slices. In this case, the "},{"type":"title_reference","children":[{"type":"Text","content":"lambda"}]},{"type":"Text","content":" keyword is\nredundant."}]},{"type":"paragraph","children":[{"type":"Text","content":"Using "},{"type":"title_reference","children":[{"type":"Text","content":"Slice"}]},{"type":"Text","content":" directly can be required in some cases, however. For example if\ndependencies between properties are required. In this case, one can replicate\nthe previous example as follows:"}]},{"type":"literal_block","children":[{"type":"Text","content":"feature = dt.DummyFeature()\nsliced_feature = feature + dt.Slice(\n    slices=lambda dim1, dim2: (dim1, dim2),\n    dim1=slice(lambda: 0, lambda: 1, 1),\n    dim2=slice(1, 2, None),\n    dim3=lambda: slice(None, None, -2)\n)\nsliced_feature.resolve(np.arange(27).reshape((3, 3, 3)))"}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"slices"}]},{"type":"classifier","children":[{"type":"Text","content":"iterable of int, slice or ellipsis"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"The indexing of each dimension in order."}]}]}]}]}]}]},"superclass":"Feature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"Slice","qualified_name":"deeptrack.features.Slice","signature":"(slices: Union[Iterable[Union[int, Callable[..., int]]], Callable[..., Iterable[Union[int, Callable[..., int]]]]], **kwargs)"},"Stack":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Stacks the input and the value."}]},{"type":"paragraph","children":[{"type":"Text","content":"If B is a feature then Stack can be visualized as:"}]},{"type":"literal_block","children":[{"type":"Text","content":"A >> Stack(B) = [*A(), *B()]"}]},{"type":"paragraph","children":[{"type":"Text","content":"If either A or B create a single Image, an additional dimension is automatically added."}]},{"type":"paragraph","children":[{"type":"Text","content":"This can be"}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"value"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Feature that produces image to stack on input."}]}]}]}]}]}]},"superclass":"Feature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"Stack","qualified_name":"deeptrack.features.Stack","signature":"(value=typing.Union[typing.Any, typing.Callable[..., typing.Any]], **kwargs)"},"StructuralFeature":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Provides the structure of a feature-set\nFeature with __property_verbosity__ = 2 to avoid adding it to the list\nof properties, and __distributed__ = False to pass the input as-is."}]}]},"superclass":"Feature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"StructuralFeature","qualified_name":"deeptrack.features.StructuralFeature","signature":"(_input=[], **kwargs)"},"Subtract":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Subtracts a value from the input."}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"value"}]},{"type":"classifier","children":[{"type":"Text","content":"number"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"The value to subtract"}]}]}]}]}]}]},"superclass":"ArithmeticOperationFeature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"Subtract","qualified_name":"deeptrack.features.Subtract","signature":"(value: Union[float, Callable[..., float]] = 0, **kwargs)"},"Value":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Multiplies the input with a value."}]}],"Parameters":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Parameters"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"value"}]},{"type":"classifier","children":[{"type":"Text","content":"number"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"The value to multiply with."}]}]}]}]}]}]},"superclass":"Feature","superclass_module":"deeptrack.features","module":"deeptrack.features","name":"Value","qualified_name":"deeptrack.features.Value","signature":"(value: Union[float, Callable[..., float]] = 0, **kwargs)"}},"functions":{"_get_position":{"module":"deeptrack.features","name":"_get_position","qualified_name":"deeptrack.features._get_position"}},"docstring":{"sections":{"body":[{"type":"paragraph","children":[{"type":"Text","content":"Base class Feature and structural features"}]},{"type":"paragraph","children":[{"type":"Text","content":"Provides classes and tools for creating and interacting with features."}]}],"Classes":[{"type":"section","children":[{"type":"title","children":[{"type":"Text","content":"Classes"}]},{"type":"definition_list","children":[{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"Feature"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Base abstract class."}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"StructuralFeature"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Abstract extension of feature for interactions between features."}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"Branch"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Implementation of "},{"type":"title_reference","children":[{"type":"Text","content":"StructuralFeature"}]},{"type":"Text","content":" that resolves two features\nsequentially."}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"Probability"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Implementation of "},{"type":"title_reference","children":[{"type":"Text","content":"StructuralFeature"}]},{"type":"Text","content":" that randomly resolves a feature\nwith a certain probability."}]}]}]},{"type":"definition_list_item","children":[{"type":"term","children":[{"type":"Text","content":"Duplicate"}]},{"type":"definition","children":[{"type":"paragraph","children":[{"type":"Text","content":"Implementation of "},{"type":"title_reference","children":[{"type":"Text","content":"StructuralFeature"}]},{"type":"Text","content":" that sequentially resolves an\ninteger number of deep-copies of a feature."}]}]}]}]}]}]}},"name":"deeptrack.features"}},
    "staticQueryHashes": []}